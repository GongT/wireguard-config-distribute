name: Auto build and create release

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  cancel:
    name: Cancel Previous Runs
    runs-on: ubuntu-latest
    steps:
      - name: cancel running workflows
        uses: GongT/cancel-previous-workflows@v1.1
        env:
          GITHUB_TOKEN: ${{ github.token }}
          DELETE: "yes"
  build-musl:
    name: Build musl version
    runs-on: ubuntu-latest
    env:
      GOPROXY: https://proxy.golang.org
      GO111MODULE: auto
      GOPATH: /tmp/.go
      GOCACHE: /tmp/.cache/GOCACHE
      SYSTEM_COMMON_CACHE: /tmp/.cache
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Prepare golang
        uses: actions/setup-go@v2
        with:
          stable: true

      - uses: actions/cache@v2
        with:
          path: /tmp/.cache
          key: go-gongt-wireguard-config-distribute-${{ runner.os }}
          restore-keys: |
            go-gongt-wireguard-config-distribute-
            go-

      - name: Build
        run: |
          sudo pwsh ./scripts/build.ps1 musl

      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            dist/client.alpine
            dist/server.alpine
            dist/tool.alpine
          if-no-files-found: error

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        project:
          - client
          - server
          - tool
        exclude:
          - os: windows-latest
            project: server
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Prepare golang
        uses: actions/setup-go@v2
        with:
          stable: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: go-gongt-wireguard-config-distribute-${{ runner.os }}
          restore-keys: |
            go-gongt-wireguard-config-distribute-
            go-

      - name: Get dependencies
        run: |
          go mod download
          cd ..
          go get -u github.com/GongT/go-generate-struct-interface/cmd/go-generate-struct-interface google.golang.org/grpc/cmd/protoc-gen-go-grpc github.com/golang/protobuf/protoc-gen-go

      - name: Build
        id: build
        shell: pwsh
        run: |
          pwsh ./scripts/build.ps1 ${{ matrix.project }}
          if ($?) {
            echo "build complete!"
          }else{
            echo "build failed!"
            sleep 5
            exit 1
          }

      - name: upload
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: dist/${{ matrix.project }}*
          if-no-files-found: error

  release:
    name: Create latest release
    needs:
      - build
      - build-musl
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: GongT/actions-recreate-release@0eccdfe77165640ce33239b47cae6ea3de465cc5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: latest
          release_name: Latest
          body: Auto build from ${{ github.sha }} (master)
          draft: false
          prerelease: false

  upload:
    name: Upload release files
    needs:
      - release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        project:
          - client
          - client.alpine
          - client.exe
          - server
          - server.alpine
          - tool
          - tool.alpine
          - tool.exe
    steps:
      - name: Download Artifact
        id: download
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: ./dist/

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.download.outputs.download-path }}/${{ matrix.project }}
          asset_name: ${{ matrix.project }}
          asset_content_type: application/octet-stream
