syntax = "proto3";

option go_package = ".;protocol";

import "google/protobuf/empty.proto";

service WireguardApi {
  rpc Greeting(ClientInfoRequest) returns (ClientInfoResponse);
  rpc Start(google.protobuf.Empty) returns (stream Peers);
  rpc Close(IdReportingRequest) returns (google.protobuf.Empty);
  rpc KeepAlive(IdReportingRequest) returns (KeepAliveStatus);

  // for tool
  rpc NewGroup(NewGroupRequest) returns (google.protobuf.Empty);
  rpc GetSelfSignedCertFile(GetCertFileRequest) returns (GetCertFileResponse);
}

message GetIpResponse { string address = 1; }
message IdReportingRequest { uint64 SessionId = 1; }

message PhysicalNetwork {
  string networkId = 1;

  bool externalEnabled = 2;
  repeated string externalIp = 3;
  uint32 externalPort = 4;

  repeated string internalIp = 5;
  uint32 internalPort = 6;
}

message ClientInfoRequest {
  string groupName = 1;

  string title = 2;

  string hostname = 3;
  repeated string services = 4;

  string requestVpnIp = 5;
  PhysicalNetwork network = 6;
}

message ClientInfoResponse {
  uint64 SessionId =1;
  string offerIp = 2;
  string publicIp = 3;
}

/** 服务器下发配置 */
message Peers {
  message ConnectionTarget {
    string publicKey = 1;

    string address = 3;
    uint32 port = 4;

    string vpnIp = 5;
    int32 keepAlive = 6;
    int32 MTU = 7;
  }
  message Peer {
    string title = 1;
    string hostname = 2;
    ConnectionTarget peer = 4;
  }

  repeated Peer list = 1;
  /* hostname => ip */
  map<string, string> hosts = 2;
}

message KeepAliveStatus { bool success = 1; }

message GetCertFileRequest { bytes password = 1; }
message GetCertFileResponse { bytes certFileText = 1;}
message NewGroupRequest {
  string name = 1;
  string title = 2;
  string ipPrefix = 3;
}
